package searchingUI;

import java.util.ArrayList;
import access.SAHIAccess;
import searchSort.SearchSortInterface;
import titlesUI.TitleFrameApp;
import access.DAO;
import text.TextFileInterface;

/**
 *
 * @author Kelvin Bonilla
 */
public class SearchingFrame extends javax.swing.JFrame
{
    private final javax.swing.JFrame previousWindow;
    private final ArrayList<DAO.SearchType> searchTypes = new ArrayList<>();
    private TextFileInterface dataAccess;
    private SearchSortInterface searchInfo = null;
    
    private final int HUNDRED = 0;
    private final int THOUSAND = 1;
    private final int TEN_THOUSAND = 2;
    
    private final int IN_ORDER = 0;
    private final int RANDOM_ORDER = 1;
    
    /**
     * Creates new form SearchingSituations
     */
    public SearchingFrame(javax.swing.JFrame previousWindow) {
        initComponents();
        this.previousWindow = previousWindow;
        searchTypes.add(DAO.SearchType.LINEAR);
        searchTypes.add(DAO.SearchType.BINARY);
        searchTypes.add(DAO.SearchType.HASHING);
        selectRadioButton("numElements", 0);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numElementsBtnGroup = new javax.swing.ButtonGroup();
        sortStatusBtnGroup = new javax.swing.ButtonGroup();
        numElementsLbl = new javax.swing.JLabel();
        hunElementsRadioBtn = new javax.swing.JRadioButton();
        thouElementsRadioBtn = new javax.swing.JRadioButton();
        tenThouElementsRadioBtn = new javax.swing.JRadioButton();
        sortStatusLbl = new javax.swing.JLabel();
        inOrderRadioBtn = new javax.swing.JRadioButton();
        randomOrderRadioBtn = new javax.swing.JRadioButton();
        sortsChosenLbl = new javax.swing.JLabel();
        searchesComboBox = new javax.swing.JComboBox<>();
        outputLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTxtArea = new javax.swing.JTextArea();
        outputResultsBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchForTxtField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Searching Window");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingEvt(evt);
            }
        });

        numElementsLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        numElementsLbl.setText("Number of Elements:");
        numElementsLbl.setToolTipText("The number of elements the implementation structure will have.");

        numElementsBtnGroup.add(hunElementsRadioBtn);
        hunElementsRadioBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        hunElementsRadioBtn.setText("100");
        hunElementsRadioBtn.setToolTipText("Structure will have 100 elements.");

        numElementsBtnGroup.add(thouElementsRadioBtn);
        thouElementsRadioBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        thouElementsRadioBtn.setText("1,000");
        thouElementsRadioBtn.setToolTipText("Structure will have 1,000 elements.");

        numElementsBtnGroup.add(tenThouElementsRadioBtn);
        tenThouElementsRadioBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tenThouElementsRadioBtn.setText("10,000");
        tenThouElementsRadioBtn.setToolTipText("Structure will have 10,000 elements.");

        sortStatusLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sortStatusLbl.setText("Sort Status:");
        sortStatusLbl.setToolTipText("Whether the structure the sort will be applied on is sorted in some way.");

        sortStatusBtnGroup.add(inOrderRadioBtn);
        inOrderRadioBtn.setText("In-Order");
        inOrderRadioBtn.setToolTipText("The structure will be pre-sorted in ascending order.");
        inOrderRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inOrderRadioBtnActionPerformed(evt);
            }
        });

        sortStatusBtnGroup.add(randomOrderRadioBtn);
        randomOrderRadioBtn.setText("Random-Order");
        randomOrderRadioBtn.setToolTipText("The structure will have values in a random order.");
        randomOrderRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomOrderRadioBtnActionPerformed(evt);
            }
        });

        sortsChosenLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sortsChosenLbl.setText("Searches Available:");
        sortsChosenLbl.setToolTipText("The name of the search.");

        searchesComboBox.setToolTipText("A list of all of the searches that can be chosen.");

        outputLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        outputLbl.setText("Output:");
        outputLbl.setToolTipText("The contents of the stored data");

        outputTxtArea.setEditable(false);
        outputTxtArea.setColumns(20);
        outputTxtArea.setLineWrap(true);
        outputTxtArea.setRows(5);
        outputTxtArea.setToolTipText("Displaying the contents of the data previously chosen");
        outputTxtArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(outputTxtArea);

        outputResultsBtn.setText("Output Results");
        outputResultsBtn.setToolTipText("Shows the results of the sort in the output box.");
        outputResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputResultsBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Search For:");

        searchForTxtField.setText("[Enter Value]");
        searchForTxtField.setToolTipText("Prompt for entering the value to search for.");
        searchForTxtField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFieldFocusGainedEvt(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(numElementsLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hunElementsRadioBtn)
                        .addGap(18, 18, 18)
                        .addComponent(thouElementsRadioBtn)
                        .addGap(18, 18, 18)
                        .addComponent(tenThouElementsRadioBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sortStatusLbl)
                        .addGap(75, 75, 75)
                        .addComponent(inOrderRadioBtn)
                        .addGap(18, 18, 18)
                        .addComponent(randomOrderRadioBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortsChosenLbl)
                            .addComponent(jLabel1)
                            .addComponent(outputLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchForTxtField)
                            .addComponent(searchesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputResultsBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(371, 371, 371)
                            .addComponent(backBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(192, 192, 192)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numElementsLbl)
                    .addComponent(hunElementsRadioBtn)
                    .addComponent(thouElementsRadioBtn)
                    .addComponent(tenThouElementsRadioBtn))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortStatusLbl)
                    .addComponent(inOrderRadioBtn)
                    .addComponent(randomOrderRadioBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortsChosenLbl))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchForTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(outputResultsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputLbl))
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillComboBox(boolean inOrderChosen)
    {
        emptyComboBox();
        String theSearchFirstLetter;
        String theSearchTheRest;
        String theSearch;
        if(inOrderChosen)
        {
            for(int i = 0; i < searchTypes.size(); i++)
            {
                theSearchFirstLetter = searchTypes.get(i).toString().substring(0, 1);
                theSearchTheRest = searchTypes.get(i).toString().substring(1);
                theSearch = theSearchFirstLetter + theSearchTheRest.toLowerCase();
                searchesComboBox.addItem(theSearch);
            }
        }
        else
        {
            theSearchFirstLetter = searchTypes.get(0).toString().substring(0, 1);
            theSearchTheRest = searchTypes.get(0).toString().substring(1);
            theSearch = theSearchFirstLetter + theSearchTheRest.toLowerCase();
            searchesComboBox.addItem(theSearch);
        }
    }
    
    private void emptyComboBox()
    {
        searchesComboBox.removeAllItems();
    }
    
    private int getRadioButtonIndex(String btnGroup)
    {
        if(btnGroup.equalsIgnoreCase("numElements"))
        {
            if(hunElementsRadioBtn.isSelected())
                return 0;
            else if(thouElementsRadioBtn.isSelected())
                return 1;
            else if(tenThouElementsRadioBtn.isSelected())
                return 2;
            else
                return -1;
        }
        else if(btnGroup.equalsIgnoreCase("sortStatus"))
        {
            if(inOrderRadioBtn.isSelected())
                return 0;
            else if(randomOrderRadioBtn.isSelected())
                return 1;
            else
                return -1;
        }
        else
            return -1;
    }
    
    private void selectRadioButton(String btnGroup, int index)
    {
        if(btnGroup.equalsIgnoreCase("numElements"))
        {
            switch(index)
            {
                case 0:
                    hunElementsRadioBtn.setSelected(true);
                    break;
                case 1:
                    thouElementsRadioBtn.setSelected(true);
                    break;
                case 2:
                    tenThouElementsRadioBtn.setSelected(true);
                    break;
                default:
                    numElementsBtnGroup.clearSelection();
            }               
        }
        else if(btnGroup.equalsIgnoreCase("sortStatus"))
        {
            switch(index)
            {
                case 0:
                    inOrderRadioBtn.setSelected(true);
                    break;
                case 1:
                    randomOrderRadioBtn.setSelected(true);
                    break;
                default:
                    sortStatusBtnGroup.clearSelection();
                
            }
        }
    }
    
    private DAO.SearchType getSearchType(int index)
    {
        DAO.SearchType toReturn;
        switch(index)
        {
            case 0:
                toReturn = DAO.SearchType.LINEAR;
                break;
            case 1:
                toReturn = DAO.SearchType.BINARY;
                break;
            case 2:
                toReturn = DAO.SearchType.HASHING;
                break;
            default:
                toReturn = DAO.SearchType.LINEAR;
                break;
        }
        return toReturn;
    }
    
    private void txtFieldFocusGainedEvt(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldFocusGainedEvt
        if (evt.getComponent() instanceof javax.swing.JTextField)
        {
            javax.swing.JTextField tf = (javax.swing.JTextField) evt.getComponent();
            tf.selectAll();
        }
    }//GEN-LAST:event_txtFieldFocusGainedEvt

    private void outputResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputResultsBtnActionPerformed
        Integer toSearchFor;
        int size;
        int noneSelected = -1;
        DAO.Order theOrder;
        DAO.SearchType searchType;
        long startTime;
        long endTime;
        long duration;
        int results;
        try
        {
            int numElementIndex = getRadioButtonIndex("numElements");
            int orderIndex = getRadioButtonIndex("sortStatus");
            int searchIndex = searchesComboBox.getSelectedIndex();
            
            if(searchIndex != noneSelected)
            {
                toSearchFor = Integer.parseInt(searchForTxtField.getText());
                searchType = getSearchType(searchIndex);                
            }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Search type was not selected.", "Missing Data Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(numElementIndex != -1)
                switch(numElementIndex)
                {
                    case HUNDRED:
                        size = 100;
                        break;
                    case THOUSAND:
                        size = 1000;
                        break;
                    case TEN_THOUSAND:
                        size = 10000;
                        break;
                    default:
                        size = 100;
                        break;
                }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Number of elements was not selected", "Missing Data Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(orderIndex != noneSelected)
                switch(orderIndex)
                {
                    case IN_ORDER:
                        theOrder = DAO.Order.IN_ORDER;
                        break;
                    case RANDOM_ORDER:
                        theOrder = DAO.Order.RANDOM;
                        break;
                    default:
                        theOrder = DAO.Order.IN_ORDER;
                        break;
                }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Sort order was not selected.", "Missing Data Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            dataAccess = DAO.createTextFile(size, theOrder);
            Integer[] someArray = dataAccess.getArray();
            SAHIAccess toSearchThrough = DAO.getComparableArrayHolder(someArray);
            
            if(toSearchFor > size)
                javax.swing.JOptionPane.showMessageDialog(this, "Value to search for is greater than the current capacity of the structure.", "Out Of Bounds Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            else if(toSearchFor < 0)
                javax.swing.JOptionPane.showMessageDialog(this, "Value to search for is less than the minimum value of the structure", "Out Of Bounds Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            else
            {
                startTime = System.nanoTime();
                results = toSearchThrough.indexOf(toSearchFor, searchType);
                endTime = System.nanoTime();
                duration = endTime - startTime;
                searchInfo = DAO.getSearchInfoHolder(searchType, Integer.toString(toSearchFor), Integer.toString(results), "Array", "Integer", size, duration, "nano-seconds", toSearchThrough.getSearchComparisons());
                outputTxtArea.setText(searchInfo.toString());
                dataAccess.writeToOutput(searchInfo);
            }    
        }
        catch(NumberFormatException ex)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! " + ex.toString());
        }
    }//GEN-LAST:event_outputResultsBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        TitleFrameApp.displayFrame(previousWindow, this);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void windowClosingEvt(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingEvt
        backBtn.doClick();
    }//GEN-LAST:event_windowClosingEvt

    private void inOrderRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inOrderRadioBtnActionPerformed
        fillComboBox(true);
    }//GEN-LAST:event_inOrderRadioBtnActionPerformed

    private void randomOrderRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomOrderRadioBtnActionPerformed
        fillComboBox(false);
    }//GEN-LAST:event_randomOrderRadioBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JRadioButton hunElementsRadioBtn;
    private javax.swing.JRadioButton inOrderRadioBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup numElementsBtnGroup;
    private javax.swing.JLabel numElementsLbl;
    private javax.swing.JLabel outputLbl;
    private javax.swing.JButton outputResultsBtn;
    private javax.swing.JTextArea outputTxtArea;
    private javax.swing.JRadioButton randomOrderRadioBtn;
    private javax.swing.JTextField searchForTxtField;
    private javax.swing.JComboBox<String> searchesComboBox;
    private javax.swing.ButtonGroup sortStatusBtnGroup;
    private javax.swing.JLabel sortStatusLbl;
    private javax.swing.JLabel sortsChosenLbl;
    private javax.swing.JRadioButton tenThouElementsRadioBtn;
    private javax.swing.JRadioButton thouElementsRadioBtn;
    // End of variables declaration//GEN-END:variables
}
