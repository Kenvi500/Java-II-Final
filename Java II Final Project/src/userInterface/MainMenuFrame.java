package userInterface;


/**
 *
 * @author Kelvin Bonilla
 */
public class MainMenuFrame extends javax.swing.JFrame {
    private java.util.ArrayList<String> dataNames;
    private java.util.ArrayList<Boolean> isInteger;
    private java.util.ArrayList<Object> data;    

    
    /**
     * Creates new form mainMenuFrame
     */
    public MainMenuFrame() {
        initComponents();
        dataNames = new java.util.ArrayList<>();
        isInteger = new java.util.ArrayList<>();
        data = new java.util.ArrayList<>();
        populateStoredData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combinationLbl = new javax.swing.JLabel();
        storedDataLbl = new javax.swing.JLabel();
        algoNameLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        nxtBtn = new javax.swing.JButton();
        checkDataBtn = new javax.swing.JButton();
        storeDataBtn = new javax.swing.JButton();
        delDataBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        algoLst = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        storedDataLst = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");
        setResizable(false);

        combinationLbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        combinationLbl.setText("Choose a Combination");

        storedDataLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        storedDataLbl.setText("Stored Data");

        algoNameLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        algoNameLbl.setText("Algorithms");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        nxtBtn.setText("Next");
        nxtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtBtnActionPerformed(evt);
            }
        });

        checkDataBtn.setText("Check Data");
        checkDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDataBtnActionPerformed(evt);
            }
        });

        storeDataBtn.setText("Store Data");
        storeDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeDataBtnActionPerformed(evt);
            }
        });

        delDataBtn.setText("Delete Data");
        delDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDataBtnActionPerformed(evt);
            }
        });

        algoLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        algoLst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(algoLst);

        storedDataLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(storedDataLst);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(combinationLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(storedDataLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(algoNameLbl)
                .addGap(68, 68, 68))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(storeDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkDataBtn)
                        .addGap(12, 12, 12)
                        .addComponent(nxtBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backBtn)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(combinationLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storedDataLbl)
                    .addComponent(algoNameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(nxtBtn)
                    .addComponent(checkDataBtn)
                    .addComponent(storeDataBtn)
                    .addComponent(delDataBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateAlgorithms(String[] theArray)
    {
        javax.swing.DefaultListModel<String> model = new javax.swing.DefaultListModel<>();
        for(int i = 0; i < theArray.length; i++)
            model.addElement(theArray[i]);
        algoLst.setModel(model);
    }
    
    private void populateStoredData()
    {
        javax.swing.DefaultListModel<String> model = new javax.swing.DefaultListModel<>();
        model.clear();
        storedDataLst.setModel(model);
    }
    
    private void addToStoredData()
    {
        javax.swing.DefaultListModel<String> model = (javax.swing.DefaultListModel) storedDataLst.getModel();
        model.addElement(dataNames.get(dataNames.size() - 1));
    }
            
    public void addData(String name, access.SAHIAccess arrayToAdd)
    {
        dataNames.add(name);
        isInteger.add(false);
        data.add(arrayToAdd);
        addToStoredData();
    }
    
    public void addData(String name, Integer theInt)
    {
        dataNames.add(name);
        isInteger.add(true);
        data.add(theInt);
        addToStoredData();
    }
    
    private void removeFromStoredData(int index)
    {
        javax.swing.DefaultListModel<String> model = (javax.swing.DefaultListModel) storedDataLst.getModel();
        model.remove(index);
    }
    
    private void storeDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeDataBtnActionPerformed
        TitleFrameApp.displayFrame(new Array_Integer_Popup(this), this);
    }//GEN-LAST:event_storeDataBtnActionPerformed

    private void delDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDataBtnActionPerformed
        if(storedDataLst.getSelectedIndex() == -1)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No data was chosen for deletion.", "Data Not Detected Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else
        {
            int[] selected = storedDataLst.getSelectedIndices();
            int numOfIndices = selected.length;
            for(int i = numOfIndices - 1; i > -1; i--)
            {
                dataNames.remove(selected[i]);
                isInteger.remove(selected[i]);
                data.remove(selected[i]);
                removeFromStoredData(selected[i]);
            }
        }        
    }//GEN-LAST:event_delDataBtnActionPerformed

    private void checkDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDataBtnActionPerformed
        if(storedDataLst.getSelectedIndex() == -1)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error! No data was chosen.", "Data Not Detected Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        int index = storedDataLst.getSelectedIndex();
        TitleFrameApp.displayFrame(new CheckDataFrame(this, dataNames.get(index), data.get(index)), this);
    }//GEN-LAST:event_checkDataBtnActionPerformed

    private void nxtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtBtnActionPerformed
        // making sure something was selected
        if(storedDataLst.getSelectedIndex() == -1) 
        {                    
            javax.swing.JOptionPane.showMessageDialog(this, "Error! Nothing has been selected", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(algoLst.getSelectedIndex() == -1)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! Nothing has been selected", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
        int[] selected = storedDataLst.getSelectedIndices();
        
        // checking the stored data selections to make sure the correct amount of data has been selected
        int holderCount = 0;
        int intCount = 0;
        
        for(int i = 0; i < selected.length; i++)
        {
            if(data.get(selected[i]) instanceof sourceCode.data.ComparableArrayHolder)
                holderCount++;
            else if(data.get(selected[i]) instanceof Integer)
                intCount++;
        }
                
        if(holderCount > 1) 
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No more than 1 array can be selected at a time.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(intCount > 2)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No more than 2 integers can be selected at a time.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(intCount == 1)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No less than 2 integers can be selected at a time", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(holderCount != 0 & intCount != 0)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! Data selected must be of the same type.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedAlg = algoLst.getSelectedIndex();
        
        if(selectedAlg == AlgChoice.GREATEST_COMMON_DIVISOR.ordinal())
        {
            if(holderCount != 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Error! Algorithm can't be done on the selected data.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            else if(isInteger.get(selected[0]) && isInteger.get(selected[1]))
            {
                Integer int1 = (Integer) data.get(selected[0]);
                Integer int2 = (Integer) data.get(selected[1]);
                
                TitleFrameApp.displayFrame(new GCDFrame(this, int1, int2), this);
            }
        }
        else if(selectedAlg == AlgChoice.BUBBLE_SORT.ordinal() || selectedAlg == AlgChoice.INSERTION_SORT.ordinal())        
        {
            if(intCount == 2)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Error! Algorithm can't be done on the selected data.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }            
            
            javax.swing.DefaultListModel<String> model = (javax.swing.DefaultListModel) storedDataLst.getModel();            
            
            String arrayName = model.get(selected[0]);
            String sortType = algoLst.getSelectedValue();
            sourceCode.access.SAHIAccess toBeSorted = (sourceCode.access.SAHIAccess) data.get(selected[0]);
            
            TitleFrameApp.displayFrame(new SortingFrame(this, arrayName, sortType, toBeSorted), this);
        }
        else if(selectedAlg == AlgChoice.LINEAR_SEARCH.ordinal() || selectedAlg == AlgChoice.BINARY_SEARCH.ordinal())
        {
            if(intCount == 2)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Error! Algorithm can't be done on the selected data.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            javax.swing.DefaultListModel<String> model = (javax.swing.DefaultListModel) storedDataLst.getModel();
            
            String arrayName = model.get(selected[0]);
            String searchType = algoLst.getSelectedValue();
            sourceCode.access.SAHIAccess toBeSearched = (sourceCode.access.SAHIAccess) data.get(selected[0]);
            
            if(selectedAlg == AlgChoice.BINARY_SEARCH.ordinal())
            {
                if(toBeSearched.getCurSortState() == sourceCode.access.SAHIAccess.SortState.UNSORTED)
                {
                    javax.swing.JOptionPane.showMessageDialog(this, "Error! Algorithm can't be done on the selected data.", "Selection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
            TitleFrameApp.displayFrame(new SearchingFrame(this, arrayName, searchType, toBeSearched), this);
        }            
    }//GEN-LAST:event_nxtBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        TitleFrameApp.displayFrame(titleFrame, this);
    }//GEN-LAST:event_backBtnActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> algoLst;
    private javax.swing.JLabel algoNameLbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton checkDataBtn;
    private javax.swing.JLabel combinationLbl;
    private javax.swing.JButton delDataBtn;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton nxtBtn;
    private javax.swing.JButton storeDataBtn;
    private javax.swing.JLabel storedDataLbl;
    private javax.swing.JList<String> storedDataLst;
    // End of variables declaration//GEN-END:variables
}
