package sortingUI;

import titlesUI.TitleFrameApp;
import java.util.ArrayList;
import access.*;
import javax.swing.DefaultListModel;
import searchSort.SortingEnums;

/**
 *
 * @author Kelvin Bonilla
 */
public class SortingAlgorithmsMenuFrame extends javax.swing.JFrame {
    private javax.swing.JFrame previousWindow;
    private ArrayList<SAHIAccess.SortType> sortsAvailable;

    
    /**
     * Creates new form mainMenuFrame
     */
    public SortingAlgorithmsMenuFrame(javax.swing.JFrame previousWindow) {
        initComponents();
        this.previousWindow = previousWindow;
        clearLists(); // clearing all the lists of anything
        initializeSortsAvailable();
        populateAlgorithms(sortsAvailable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numElementsBtnGroup = new javax.swing.ButtonGroup();
        combinationLbl = new javax.swing.JLabel();
        implementationLbl = new javax.swing.JLabel();
        algoNameLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        nxtBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        algoLst = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        implementationLst = new javax.swing.JList<>();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        toCompareLst = new javax.swing.JList<>();
        toCompareLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sorting Menu");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingEvt(evt);
            }
        });

        combinationLbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        combinationLbl.setText("Choose a Sorting Algorithm");

        implementationLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        implementationLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        implementationLbl.setText("Implementation");

        algoNameLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        algoNameLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        algoNameLbl.setText("Sorting Algorithms");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        nxtBtn.setText("Next");
        nxtBtn.setToolTipText("Brings you to the next window, which will be the \"Sorting Situations\" window.");
        nxtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtBtnActionPerformed(evt);
            }
        });

        algoLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        algoLst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        algoLst.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                valueSelectedEvt(evt);
            }
        });
        jScrollPane3.setViewportView(algoLst);

        implementationLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        implementationLst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(implementationLst);

        addBtn.setText("Add >>");
        addBtn.setToolTipText("Adds the sorting algorithm and it's implementation to the \"To Compare\" list.");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("<< Remove");
        removeBtn.setToolTipText("Removes the chosen sorting algorithm and it's implementation from the \"To Compare\" list.");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        toCompareLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        toCompareLst.setToolTipText("List containing each sorting algorithm with their implementation that have been chosen to be compared.");
        jScrollPane1.setViewportView(toCompareLst);

        toCompareLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        toCompareLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toCompareLbl.setText("To Compare");
        toCompareLbl.setToolTipText("List of the sorting algorithms to be compared.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(algoNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(implementationLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(toCompareLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nxtBtn)
                        .addGap(18, 18, 18)
                        .addComponent(backBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(combinationLbl)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(combinationLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toCompareLbl)
                    .addComponent(implementationLbl)
                    .addComponent(algoNameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addBtn)
                        .addGap(18, 18, 18)
                        .addComponent(removeBtn)
                        .addGap(65, 65, 65))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(nxtBtn))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearLists()
    {
        DefaultListModel<String> model = new DefaultListModel<>();
        model.clear();
        algoLst.setModel(model);
        implementationLst.setModel(model);
        toCompareLst.setModel(model);
    }
    
    private void populateAlgorithms(ArrayList<SAHIAccess.SortType> theSorts)
    {
        DefaultListModel<String> model = new DefaultListModel<>();
        String firstLetter;
        String theRest;
        String toAdd;
        for(int i = 0; i < sortsAvailable.size(); i++)
        {
            firstLetter = sortsAvailable.get(i).toString().substring(0, 1);
            theRest = sortsAvailable.get(i).toString().substring(1);
            theRest = theRest.toLowerCase();
            toAdd = firstLetter + theRest;
            model.add(i, toAdd); // at this point, the sort name should be in the form of [CAPITAL-LETTER][lowercase-letters] instead of all capital letters
            
        }
        algoLst.setModel(model);
    }
    
    private void initializeSortsAvailable()
    {
        sortsAvailable = new ArrayList<>();
        sortsAvailable.add(SortingEnums.SortType.SELECTION);
        sortsAvailable.add(SAHIAccess.SortType.INSERTION);
        sortsAvailable.add(SAHIAccess.SortType.BUBBLE);
        sortsAvailable.add(SAHIAccess.SortType.QUICK);
        sortsAvailable.add(SAHIAccess.SortType.MERGE);
        sortsAvailable.add(SAHIAccess.SortType.HEAP);
    }
    
    private String[] getSortImplementations(SAHIAccess.SortType theSort)
    {
        String[] output = new String[2];
        switch(theSort)
        {
            case SELECTION:
                output[0] = "Array";
                output[1] = "Linked-List";
                break;
            case INSERTION:
                output[0] = "Array";
                output[1] = "Linked-List";
                break;
            case BUBBLE:
                output[0] = "Array";
                output[1] = "Linked-List";
                break;
            case QUICK:
                output[0] = "Array";
                output[1] = "Linked-List";
                break;
            case MERGE:
                output[0] = "Array";
                output[1] = "Linked-List";
                break;
            case HEAP:
                output[0] = "Array";
                break;
            default:
                output[0] = "Unknown";
                break;
        }
        return output;
                
    }
    
    private void addImplementations(String[] implementationNames)
    {
        DefaultListModel<String> model = new DefaultListModel<>();
        for(String name : implementationNames)
            model.addElement(name);
        implementationLst.setModel(model);
    }
    
    private void addToCompare(String theSortWithImpl)
    {
        DefaultListModel<String> model = (DefaultListModel) toCompareLst.getModel();
        model.addElement(theSortWithImpl);
        toCompareLst.setModel(model);
    }
    
    private void removeFromCompare(int index)
    {
        DefaultListModel<String> model = (DefaultListModel) toCompareLst.getModel();
        model.remove(index);
        toCompareLst.setModel(model);
    }
    
    private void nxtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtBtnActionPerformed
        ArrayList<String> sortsToCompare = new ArrayList<>();
        DefaultListModel<String> model = (DefaultListModel) toCompareLst.getModel();
        for(int i = 0; i < model.getSize(); i++)
            sortsToCompare.add(i, model.get(i));
        TitleFrameApp.displayFrame(new SortingSituationsFrame(this, sortsToCompare), this);
    }//GEN-LAST:event_nxtBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        TitleFrameApp.displayFrame(previousWindow, this);
    }//GEN-LAST:event_backBtnActionPerformed

    private void valueSelectedEvt(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_valueSelectedEvt
        addImplementations(getSortImplementations(sortsAvailable.get(algoLst.getSelectedIndex())));
    }//GEN-LAST:event_valueSelectedEvt

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        int algoIndex = algoLst.getSelectedIndex();
        int implIndex = implementationLst.getSelectedIndex();
        int nothingSelected = -1;
        if(algoIndex == nothingSelected)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No algorithm has been selected.", "Selection Error.", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(implIndex == nothingSelected)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! No implementation has been selected.", "Selection Error.", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }      
        else
        {
            SAHIAccess.SortType sortType = sortsAvailable.get(algoIndex);
            String implementation = getSortImplementations(sortsAvailable.get(algoIndex))[implIndex];
            
            String sortFirstLetter = sortType.toString().substring(0,1);
            String sortRest = sortType.toString().substring(1);
            
            String chosenSort = sortFirstLetter + sortRest.toLowerCase() + " | " + implementation;
            addToCompare(chosenSort);
        }
            
    }//GEN-LAST:event_addBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int toRemove = toCompareLst.getSelectedIndex();
        boolean hasNoSelection = (toRemove == -1);
        if(hasNoSelection)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error! Nothing has been selected to be removed.", "Selection Error.", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;            
        }
        else
            removeFromCompare(toRemove);
    }//GEN-LAST:event_removeBtnActionPerformed

    private void windowClosingEvt(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingEvt
        backBtn.doClick();
    }//GEN-LAST:event_windowClosingEvt

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JList<String> algoLst;
    private javax.swing.JLabel algoNameLbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel combinationLbl;
    private javax.swing.JLabel implementationLbl;
    private javax.swing.JList<String> implementationLst;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.ButtonGroup numElementsBtnGroup;
    private javax.swing.JButton nxtBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JLabel toCompareLbl;
    private javax.swing.JList<String> toCompareLst;
    // End of variables declaration//GEN-END:variables
}
